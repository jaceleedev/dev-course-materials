// constants/quotes.ts

export const quoteCategories = {
  famous: [
    '💡 "프로그래밍은 생각하는 방법을 가르쳐준다" - 스티브 잡스',
    '🚀 "코드는 시가 아니라 산문이어야 한다" - 도널드 크누스',
    '⚡ "좋은 프로그래머는 게으른 프로그래머다" - 래리 월',
    '🎯 "소프트웨어는 완성되는 것이 아니라 포기되는 것이다" - 조엘 스폴스키',
    '💻 "단순함이 궁극적인 정교함이다" - 레오나르도 다 빈치',
    '🔥 "디버깅은 코드를 처음 작성하는 것보다 두 배 어렵다" - 브라이언 커니간',
    '⭐ "컴퓨터는 빠르다. 프로그래머는 느리다" - 롭 파이크',
    '🌟 "모든 문제는 충분히 추상화하면 해결할 수 있다" - 데이비드 휠러',
    '💎 "가장 좋은 코드는 작성되지 않은 코드다" - 빌 게이츠',
    '🎨 "프로그래밍은 예술과 과학의 만남이다" - 도널드 크누스',
    '🚀 "걸어가면서 길이 만들어진다" - 안토니오 마차도',
    '⚡ "상상할 수 있는 것은 프로그래밍할 수 있다" - 아키라',
    '🔧 "코드는 인간이 읽을 수 있도록 작성되어야 한다" - 할 아벨슨',
    '📚 "프로그래밍 언어는 생각의 도구다" - 앨런 퍼리스',
    '💪 "실수는 포털이다. 발견을 통해 들어가는 포털" - 제임스 조이스',
  ],

  java: [
    "☕ Java로 시작하면 객체지향의 진정한 힘을 느낄 수 있어요",
    "🏗️ Java의 'Write Once, Run Anywhere'처럼 한 번 배운 지식도 어디서든 활용하세요",
    "☕ Java의 가비지 컬렉터처럼, 나쁜 습관도 자동으로 정리하는 습관을 기르세요",
    "🎯 Java의 엄격함이 귀찮을 수 있지만, 그것이 안정성을 만들어줍니다",
    "☕ Spring Boot로 시작하면 Java 웹 개발이 이렇게 쉬울 줄 몰랐을 거예요",
    "🔧 Java의 다형성처럼, 하나의 문제에도 여러 해결책이 있습니다",
    "☕ JVM 위에서 돌아가는 Kotlin, Scala처럼 Java는 가능성의 플랫폼이에요",
    "🎨 Java 8의 람다식처럼, 새로운 문법은 사고방식을 바꿔줍니다",
  ],

  python: [
    "🐍 Python의 'Beautiful is better than ugly'처럼 아름다운 코드를 추구하세요",
    "⚡ Python은 생각을 코드로 옮기는 가장 빠른 방법입니다",
    "🐍 'Life is short, you need Python' - Python으로 더 많은 것을 해보세요",
    "🎯 Python의 들여쓰기처럼, 규칙은 자유를 만들어줍니다",
    "🐍 NumPy부터 Django까지, Python 생태계는 무한합니다",
    "⚡ Python으로 AI를 만들고, 웹을 만들고, 게임도 만들어보세요",
    "🐍 'Pythonic'한 코드는 읽는 사람을 배려하는 코드입니다",
    "🔥 Python의 list comprehension처럼, 간결함 속에 힘이 있어요",
  ],

  javascript: [
    "🌐 JavaScript는 세상을 연결하는 언어입니다",
    "⚡ Node.js로 프론트엔드와 백엔드의 경계를 허물어보세요",
    "🎨 React처럼 컴포넌트로 생각하면 복잡한 UI도 쉬워집니다",
    "🔧 TypeScript는 JavaScript에 날개를 달아줍니다",
    "🌐 JavaScript의 비동기 처리처럼, 병렬적 사고를 기르세요",
    "⚡ ES6+의 새로운 문법들을 배우면 코딩이 더 즐거워져요",
    "🎯 Vue.js의 반응성처럼, 데이터 변화에 민감하게 반응하세요",
    "🚀 JavaScript는 브라우저를 넘어 모바일, 데스크톱까지 정복했어요",
  ],

  cpp: [
    "⚙️ C언어는 컴퓨터와 대화하는 가장 직접적인 방법입니다",
    "🔧 포인터를 이해하면 메모리의 비밀이 보입니다",
    "⚙️ C++의 객체지향은 C의 절차지향 위에 쌓인 진화입니다",
    "💪 C언어로 만든 기초가 모든 언어의 뿌리가 됩니다",
    "⚙️ 메모리 관리를 직접 하면서 컴퓨터의 작동원리를 배우세요",
    "🔥 C++의 STL처럼, 바퀴를 다시 발명하지 말고 활용하세요",
    "⚙️ 시스템 프로그래밍의 세계로 들어가는 문이 바로 C입니다",
  ],

  sql: [
    "📊 SQL은 데이터와 대화하는 언어입니다",
    "🗃️ 정규화는 데이터베이스의 정리정돈입니다",
    "📈 JOIN을 마스터하면 데이터의 숨은 이야기가 보입니다",
    "🔍 인덱스는 책의 목차처럼 빠른 검색을 도와줍니다",
    "📊 NoSQL과 SQL, 상황에 맞는 도구를 선택하는 지혜를 기르세요",
    "🗄️ 데이터베이스 설계는 미래를 대비하는 투자입니다",
    "📈 빅데이터 시대, SQL 실력은 경쟁력입니다",
  ],

  rust: [
    "🦀 Rust로 메모리 안전성과 성능을 동시에 잡으세요",
    "⚡ Rust의 소유권 시스템은 처음엔 어렵지만 익숙해지면 강력해요",
    "🦀 'If it compiles, it works' - Rust의 엄격함이 안정성을 보장합니다",
    "🔧 Rust는 시스템 프로그래밍의 새로운 패러다임입니다",
    "🦀 제로 코스트 추상화로 고수준 코드를 저수준 성능으로",
    "⚡ Cargo로 Rust 패키지 관리의 즐거움을 느껴보세요",
    "🦀 Rust의 패턴 매칭으로 코드를 더 표현력 있게 만드세요",
    "🔒 Rust에서는 데이터 레이스가 컴파일 타임에 잡힙니다",
  ],

  go: [
    "🐹 Go의 단순함이 복잡한 시스템을 간단하게 만들어줍니다",
    "⚡ Go routines로 동시성 프로그래밍을 쉽게 시작하세요",
    "🐹 'Don't communicate by sharing memory; share memory by communicating'",
    "🔧 Go의 컴파일 속도는 개발 생산성을 크게 향상시킵니다",
    "🐹 gofmt으로 코드 스타일 논쟁을 끝내세요",
    "⚡ 채널(channel)로 고루틴 간 안전한 통신을 하세요",
    "🐹 Go는 클라우드 네이티브 시대의 완벽한 언어입니다",
    "🚀 Docker와 Kubernetes도 Go로 만들어졌어요",
  ],

  frameworks: [
    "⚛️ React의 컴포넌트처럼, 재사용 가능한 코드를 만드세요",
    "🌸 Spring의 IoC처럼, 의존성을 역전시켜 생각해보세요",
    "🅰️ Angular의 구조화된 접근방식을 배워보세요",
    "🖼️ Tailwind CSS로 빠르게 아름다운 UI를 만들어보세요",
    "📦 npm의 패키지들처럼, 오픈소스의 힘을 활용하세요",
    "🔥 Express.js로 Node.js 웹 개발의 첫걸음을 떼어보세요",
    "🎨 Sass/SCSS로 CSS도 프로그래밍하세요",
    "📱 Flutter로 하나의 코드로 iOS와 Android 앱을 모두 만들어보세요",
  ],

  ai_modern: [
    "🤖 AI가 발전해도 창의적 사고는 인간의 몫입니다",
    "🧠 AI를 도구로 활용하되, 의존하지는 마세요",
    "⚡ AI가 코드를 써줘도 이해하고 수정할 수 있어야 합니다",
    "🔮 AI 시대일수록 기본기가 더 중요해집니다",
    "🤖 AI와 협업하는 개발자가 미래의 개발자입니다",
    "🧠 머신러닝을 이해하려면 수학과 프로그래밍이 모두 필요해요",
    "⚡ AI가 자동화해주는 만큼, 더 복잡한 문제에 도전하세요",
    "🔬 데이터 과학자가 되려면 통계학과 프로그래밍을 모두 배워야 해요",
    "🤖 AI 윤리를 고민하는 개발자가 진정한 개발자입니다",
    "🧠 AI를 만들기 전에 먼저 논리적 사고를 기르세요",
  ],

  languages_comparison: [
    "🌍 프로그래밍 언어는 컴퓨터와의 외국어입니다",
    "📖 문법을 배우는 것은 시작일 뿐, 실전에서 써봐야 늡니다",
    "🗣️ 영어를 배우듯 매일 조금씩 코딩하세요",
    "🌏 언어마다 고유한 문화가 있듯, 프로그래밍 언어도 철학이 다릅니다",
    "📚 단어를 외우듯 함수와 메서드를 익혀나가세요",
    "🎭 언어의 관용구처럼, 각 언어의 베스트 프랙티스를 배우세요",
    "🌐 다국어를 할 수 있듯, 다양한 프로그래밍 언어를 배우세요",
    "💬 언어로 생각이 바뀌듯, 프로그래밍 언어로 사고방식이 바뀝니다",
  ],

  motivation: [
    "📈 매일 1%씩 성장하면 1년 후 37배 성장합니다",
    "🎯 완벽한 코드보다는 작동하는 코드부터 만드세요",
    "🔄 리팩토링은 코드의 다이어트입니다",
    "📝 문서화는 미래의 나에게 주는 선물입니다",
    "🤝 코드 리뷰는 함께 성장하는 시간입니다",
    "🎮 코딩도 게임처럼 레벨업하는 재미가 있어요",
    "🏃‍♂️ 포기하지 않는 것이 천재성을 이깁니다",
    "🌱 새로운 기술을 배우는 것을 두려워하지 마세요",
    "🔍 구글링 실력도 개발자의 핵심 역량입니다",
    "💡 문제를 발견하는 것이 해결하는 것만큼 중요합니다",
  ],

  devops_cloud: [
    "🔧 DevOps는 문화이지 도구가 아닙니다",
    "⚡ 인프라를 코드로 관리하면 실수가 줄어듭니다",
    "🚀 CI/CD 파이프라인으로 배포의 두려움을 없애세요",
    "📊 모니터링 없는 배포는 눈 감고 운전하는 것과 같습니다",
    "☁️ AWS, Azure, GCP - 각각의 강점을 파악하고 선택하세요",
    "⚡ 서버리스로 인프라 관리 부담을 덜어보세요",
    "🐳 Docker로 '내 컴퓨터에서는 잘 됐는데' 문제를 해결하세요",
    "☁️ 클라우드 네이티브 설계 원칙을 적용하세요",
  ],

  web_mobile: [
    "🌐 HTML은 웹의 뼈대, CSS는 웹의 옷입니다",
    "🎨 CSS Grid와 Flexbox로 레이아웃의 새로운 세계를 경험하세요",
    "📱 모바일 퍼스트로 생각하는 습관을 기르세요",
    "⚡ PWA로 웹앱의 한계를 뛰어넘으세요",
    "🍎 Swift는 iOS 개발의 미래입니다",
    "🎯 Kotlin은 Java의 모든 문제를 해결해줍니다",
    "🎯 Dart와 Flutter로 한 번에 iOS와 Android 앱을 만드세요",
    "🌐 웹 접근성을 고려하는 것은 개발자의 책임입니다",
  ],

  other_languages: [
    "🐘 PHP는 웹의 80% 이상을 구동하는 숨은 영웅입니다",
    "💎 Ruby는 프로그래머의 행복을 추구합니다",
    "🔷 C#으로 데스크톱부터 웹까지 모든 플랫폼을 정복하세요",
    "🐚 Shell script로 반복 작업을 자동화하세요",
    "⚛️ 함수형 프로그래밍으로 사이드 이펙트를 최소화하세요",
    "🎮 Unity로 게임 개발의 첫걸음을 내딛어보세요",
    "🔧 Arduino로 하드웨어와 소프트웨어의 만남을 경험하세요",
    "⛓️ 블록체인은 신뢰를 코드로 구현합니다",
  ],

  architecture_patterns: [
    "🎨 디자인 패턴은 문제 해결의 검증된 레시피입니다",
    "🏛️ 좋은 아키텍처는 나중에 결정을 연기할 수 있게 해줍니다",
    "🎨 코드는 예술작품처럼 아름다워야 합니다",
    "🔧 좋은 도구가 좋은 결과를 만들어줍니다",
    "📐 측정할 수 없으면 개선할 수 없습니다",
    "🎯 사용자를 생각하며 코딩하세요",
    "🏗️ 마이크로서비스는 조직의 구조를 반영합니다 (Conway's Law)",
    "⚖️ 복잡성과 성능 사이의 균형점을 찾으세요",
  ],

  data_security: [
    "📊 데이터는 21세기의 석유입니다",
    "🔍 좋은 질문이 좋은 데이터 분석의 시작입니다",
    "🔒 보안은 나중에 추가하는 것이 아니라 처음부터 고려해야 합니다",
    "⚡ HTTPS는 이제 선택이 아니라 필수입니다",
    "📈 A/B 테스트로 가설을 과학적으로 검증하세요",
    "🔐 민감한 데이터는 암호화해서 저장하세요",
    "📊 시각화는 데이터를 이야기로 만드는 기술입니다",
    "🛡️ SQL 인젝션, XSS 같은 기본적인 취약점부터 막으세요",
  ],

  collaboration_testing: [
    "🤝 Git은 개발자의 타임머신입니다",
    "🧪 테스트는 코드의 안전망입니다",
    "📋 지라(Jira)로 프로젝트를 체계적으로 관리하세요",
    "⚡ TDD로 설계와 구현을 동시에 개선하세요",
    "🤝 GitHub으로 오픈소스 문화에 참여하세요",
    "🧪 테스트 커버리지보다 테스트 품질이 중요합니다",
    "📊 문서화는 미래의 팀원에게 주는 선물입니다",
    "🤝 코드 리뷰를 통해 서로의 실력을 높여가세요",
  ],

  ux_performance: [
    "🎨 사용자 경험은 기술보다 중요할 때가 많습니다",
    "⚡ 성능 최적화는 병목지점을 찾는 것부터 시작합니다",
    "👥 사용자를 위해 설계하고, 사용자와 함께 테스트하세요",
    "🎯 접근성(Accessibility)을 고려한 디자인을 하세요",
    "📊 성능 모니터링은 옵션이 아니라 필수입니다",
    "🎨 일관성 있는 디자인 시스템을 구축하세요",
    "🎯 최소 기능 제품(MVP)으로 빠르게 검증하세요",
    "⚡ 최적화는 게임 개발의 핵심입니다",
  ],

  growth_community: [
    "🌱 실패는 성공으로 가는 과정일 뿐입니다",
    "🤝 개발자 커뮤니티에 적극적으로 참여하세요",
    "📚 새로운 기술을 배우는 것을 두려워하지 마세요",
    "🎤 컨퍼런스 발표로 지식을 공유하고 네트워크를 넓히세요",
    "🎯 깊이와 넓이의 균형을 맞춰가며 성장하세요",
    "📝 기술 블로그로 학습한 내용을 정리하고 공유하세요",
    "🌱 멘토를 찾고, 남에게는 멘토가 되어주세요",
    "🔓 오픈소스는 지식 공유의 아름다운 문화입니다",
  ],

  work_life_balance: [
    "⚖️ 일과 삶의 균형을 유지하는 것도 개발자의 중요한 스킬입니다",
    "😴 충분한 휴식이 생산성을 높입니다",
    "🏃‍♂️ 규칙적인 운동으로 코딩 체력을 기르세요",
    "⚖️ 번아웃을 방지하기 위해 자신의 한계를 인정하세요",
    "😴 수면 부족은 버그의 온상입니다",
    "🏃‍♂️ 산책하며 생각을 정리하면 좋은 아이디어가 떠오릅니다",
    "⚖️ 완벽주의보다는 완료주의가 더 건강합니다",
    "😴 휴가는 죄가 아니라 재충전의 시간입니다",
  ],

  fun_metaphors: [
    "🍕 모놀리틱 아키텍처는 피자 한 판, 마이크로서비스는 피자 조각들",
    "🧱 코드는 레고 블록처럼 조립하고 분해할 수 있어야 합니다",
    "🚗 리팩토링은 운전 중에 타이어를 갈아끼우는 것과 같습니다",
    "🎪 버그는 서커스의 광대처럼 예상치 못한 곳에서 나타납니다",
    "🌳 코드베이스는 정원처럼 꾸준히 관리해야 합니다",
    "🏠 아키텍처는 집의 설계도처럼 나중에 바꾸기 어렵습니다",
    "🎼 좋은 코드는 교향곡처럼 조화롭습니다",
    "🍳 개발은 요리와 비슷해요. 레시피(알고리즘)와 재료(데이터)가 필요하죠",
  ],

  philosophy: [
    "🤔 '왜?'라는 질문을 멈추지 마세요",
    "⚖️ 성능과 가독성 사이의 균형점을 찾으세요",
    "🌊 흐름을 따라가되, 물길을 바꿀 용기도 가지세요",
    "🔄 변화는 상수입니다. 적응하는 자가 살아남습니다",
    "🎭 겸손함과 자신감을 동시에 가지세요",
    "🌱 씨앗이 나무가 되듯, 작은 아이디어가 큰 서비스가 됩니다",
    "🔍 숲을 보되 나무도 놓치지 마세요",
    "🎨 제약이 있을 때 더 창의적인 해결책이 나옵니다",
  ],

  future_tech: [
    "🚀 우주 개발도 결국 소프트웨어가 핵심입니다",
    "🌍 코드로 세상을 더 나은 곳으로 만들 수 있습니다",
    "🔮 10년 후에도 통용될 기본기를 탄탄히 하세요",
    "🌟 상상하는 모든 것을 코드로 구현할 수 있는 시대입니다",
    "🎯 기술의 발전에 뒤처지지 않으려면 계속 배워야 합니다",
    "⚡ 양자컴퓨팅 시대를 준비하는 개발자가 되세요",
    "🧬 생명공학과 프로그래밍의 융합이 미래를 만듭니다",
    "🌈 다양성과 포용성이 기술 발전의 동력입니다",
  ],

  general_wisdom: [
    "💻 코리아IT아카데미 신촌 - 프로그래밍 전 과목 학습 가이드",
    "🚀 오늘 해결한 버그는 내일의 경험이 됩니다",
    "💪 어려운 문제일수록 해결했을 때의 성취감이 큽니다",
    "🌟 모든 전문가도 처음엔 초보자였습니다",
    "🎯 작은 성공들이 모여 큰 성취가 됩니다",
    "⚡ 빠른 실패, 빠른 학습이 성공의 지름길입니다",
    "🔥 열정이 있으면 방법은 찾을 수 있습니다",
    "🌈 다양성이 창의성을 만들어냅니다",
    "💎 압력이 있어야 다이아몬드가 만들어집니다",
    "🏆 경쟁하되 함께 성장하세요",
  ],
};

// 카테고리 순서 정의
export const categoryOrder = [
  "famous",
  "java",
  "python",
  "javascript",
  "cpp",
  "sql",
  "rust",
  "go",
  "frameworks",
  "ai_modern",
  "languages_comparison",
  "motivation",
  "devops_cloud",
  "web_mobile",
  "other_languages",
  "architecture_patterns",
  "data_security",
  "collaboration_testing",
  "ux_performance",
  "growth_community",
  "work_life_balance",
  "fun_metaphors",
  "philosophy",
  "future_tech",
  "general_wisdom",
];

// 순환 방식으로 글귀를 선택하는 함수
export function getQuoteByRotation(daysSinceStart: number): string {
  const totalCategories = categoryOrder.length;

  // 어떤 카테고리인지 결정 (카테고리들을 순회)
  const categoryIndex = daysSinceStart % totalCategories;
  const categoryName = categoryOrder[
    categoryIndex
  ] as keyof typeof quoteCategories;

  // 해당 카테고리에서 몇 번째 글귀인지 결정
  const quotesInCategory = quoteCategories[categoryName];
  const quoteRound = Math.floor(daysSinceStart / totalCategories);
  const quoteIndex = quoteRound % quotesInCategory.length;

  return quotesInCategory[quoteIndex];
}
